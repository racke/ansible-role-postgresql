---

- name: Include variables depending on OS details
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "defaults.yml"
      paths: osvars

- name: Install PostgreSQL server package (Debian family)
  package:
    name: "{{ postgresql_server_packages | default(postgresql_os_server_packages) }}"
    state: present
  when: ansible_os_family == 'Debian'

- name: Install PostgreSQL server package (RedHat and Suse families)
  package:
    name: "{{ postgresql_server_packages | default(postgresql_os_server_packages) }}"
    state: present
  when: ansible_os_family in ['RedHat', 'Suse']

- name: Install PostgreSQL server package (FreeBSD)
  package:
    name:
      - postgresql11-server
    state: present
  when: ansible_os_family in ['FreeBSD']

- name: Install PostgreSQL development package (Debian)
  package:
    name: libpq-dev
  when:
    - postgresql_development
    - ansible_os_family == 'Debian'

- name: Install PostgreSQL development package (RedHat and Suse)
  package:
    name: postgresql-devel
    state: present
  when:
   - postgresql_development
   - ansible_os_family == 'RedHat' or ansible_os_family == 'Suse'

- name: Install prerequisites for PostgreSQL modules
  package:
    name: "{{ postgresql_ansible_requirements }}"
    state: present

- name: Query information about the PostgreSQL user
  getent:
    database: passwd
    key: "{{ postgresql_user }}"
    split: ":"
  register: postgresql_user_info
  ignore_errors: "{{ ansible_check_mode }}"

- name: Determine home directory of the PostgreSQL user
  set_fact:
    postgresql_user_home: "{{ getent_passwd['postgres'][4] }}"
  when: not postgresql_user_info.failed

- name: Initialize PostgreSQL cluster
  import_tasks: initialize.yml
  when: ansible_os_family in ['RedHat', 'FreeBSD']

- name: Determine current cluster
  import_tasks: cluster-info.yml
  when: ansible_os_family in ['Debian']

- name: Configure PostgreSQL client authentication (pg_hba.conf)
  postgresql_pg_hba:
    dest: "{{ item.conffile | default(postgresql_pg_hba_conf_file) }}"
    contype: "{{ item.contype | default(omit) }}"
    databases: "{{ item.databases | default(omit) }}"
    users: "{{ item.users | default(omit) }}"
    address: "{{ item.address | default(omit) }}"
    method: "{{ item.method | default(omit) }}"
  with_items: "{{ postgresql_pg_hba_entries | default([]) }}"
  notify: restart postgresql

- name: Ensure that PostgreSQL server is started and enabled
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Install required packages for managing PostgreSQL databases
  package:
    name: "{{ postgresql_ansible_requirements }}"
    state: present

- name: Create PostgreSQL role for owner
  postgresql_user:
    name: "{{ item.owner }}"
    password: "{{ item.password | default(omit) }}"
    port: "{{ item.port | default(postgresql_port) }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  when:
    - "'owner' in item"
  with_items:
    - "{{ postgresql_databases }}"

- name: Create additional roles for PostgreSQL
  postgresql_user:
    name: "{{ item }}"
    password: "{{ item.password | default(omit) }}"
    port: "{{ item.port | default(postgresql_port) }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  with_items:
    - "{{ postgresql_extra_roles }}"

- name: Create PostgreSQL databases
  postgresql_db:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    owner: "{{ item.owner | default(omit) }}"
    port: "{{ item.port | default(postgresql_port) }}"
    template: "{{ postgresql_template_database | default(omit) }}"
  register: postgresql_db_created
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  with_items:
    - "{{ postgresql_databases }}"

- name: Copy PostgreSQL text dump files
  copy:
    src: "{{ item.restore_from }}"
    dest: "/home/{{ item.owner }}/{{ item.restore_from }}"
    owner: "{{ item.owner}}"
    group: "{{ item.group | default(item.owner) }}"
    mode: 0400
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") != 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Restore PostgreSQL databases from text dumps
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    login_user: "{{ item.owner | default(omit) }}"
    port: "{{ item.port | default(postgresql_port) }}"
    state: restore
    target: "/home/{{ item.owner }}/{{ item.restore_from }}"
  become: true
  become_user: "{{ item.owner }}"
  vars:
    ansible_ssh_pipelining: true
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") != 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Copy PostgreSQL custom dump files
  copy:
    src: "{{ item.restore_from }}"
    dest: "{{ postgresql_user_home }}/{{ item.restore_from | basename }}"
    remote_src: "{{ item.restore_from is abs }}"
    owner: "postgres"
    group: "postgres"
    mode: 0400
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") == 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Restore PostgreSQL databases from custom dumps
  command: "pg_restore -n public -d {{ item.name }} -p {{ item.port | default(postgresql_port) }} -v -1 {{ postgresql_user_home}}/{{ item.restore_from | basename }}"
  become: true
  become_user: "postgres"
  vars:
    ansible_ssh_pipelining: true
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") == 'custom'
  with_items:
    - "{{ postgresql_databases }}"
