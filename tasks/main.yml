---
- name: Install PostgreSQL server package (Debian family)
  apt:
    name:
      - postgresql
    state: present
  when: ansible_os_family == 'Debian'

- name: Install PostgreSQL server package (RedHat family)
  yum:
    name:
      - postgresql-server
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install PostgreSQL server package (Suse family)
  zypper:
    name:
      - postgresql-server
    state: present
  when: ansible_os_family == 'Suse'

- name: Install required packages for managing PostgreSQL databases
  package:
    name: "{{ postgresql_ansible_requirements }}"
    state: present

- name: Create PostgreSQL role for owner
  postgresql_user:
    name: "{{ item.owner }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  when:
    - "'owner' in item"
  with_items:
    - "{{ postgresql_databases }}"

- name: Create additional roles for PostgreSQL
  postgresql_user:
    name: "{{ item }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  with_items:
    - "{{ postgresql_extra_roles }}"

- name: Create PostgreSQL databases
  postgresql_db:
    name: "{{ item.name }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    owner: "{{ item.owner | default(omit) }}"
  register: postgresql_db_created
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  with_items:
    - "{{ postgresql_databases }}"

- name: Copy PostgreSQL text dump files
  copy:
    src: "{{ item.restore_from }}"
    dest: "/home/{{ item.owner }}/{{ item.restore_from }}"
    owner: "{{ item.owner}}"
    group: "{{ item.group | default(item.owner) }}"
    mode: 0400
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") != 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Restore PostgreSQL databases from text dumps
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    login_user: "{{ item.owner | default(omit) }}"
    state: restore
    target: "/home/{{ item.owner }}/{{ item.restore_from }}"
  become: true
  become_user: "{{ item.owner }}"
  vars:
    ansible_ssh_pipelining: true
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") != 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Copy PostgreSQL custom dump files
  copy:
    src: "{{ item.restore_from }}"
    dest: "/var/lib/postgresql/{{ item.restore_from }}"
    owner: "postgres"
    group: "postgres"
    mode: 0400
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") == 'custom'
  with_items:
    - "{{ postgresql_databases }}"

- name: Restore PostgreSQL databases from custom dumps
  command: "pg_restore -d {{ item.name }} -v -1 //var/lib/postgresql/{{ item.restore_from }}"
  become: true
  become_user: "postgres"
  vars:
    ansible_ssh_pipelining: true
  when:
    - postgresql_db_created.changed
    - "'restore_from' in item"
    - item.restore_type | default("") == 'custom'
  with_items:
    - "{{ postgresql_databases }}"
